 /*Negation character: Â¬ */
 DIFF: PROC OPTIONS(MAIN) REORDER;                                                          
   DISPLAYREC: PROCEDURE(REC);
      /* WRITE 'REC' TO SYSPRINT IN A CLEAN FORMAT */
    DCL 1 REC  UNALIGNED,
          %INCLUDE TAXREC;;
    PUT SKIP FILE(SYSPRINT) EDIT ('TAXID', REC.META.TAXID)
      (A, COLUMN(14), F(9));
    PUT SKIP FILE(SYSPRINT) EDIT ('STATUS   ', REC.META.STATUS)    
      (A, COLUMN(14), A);
    PUT SKIP FILE(SYSPRINT) EDIT('BALANCE   ', REC.BALANCE)   
      (A, COLUMN(14), F(13,2));
     PUT SKIP FILE(SYSPRINT) EDIT ('LAST UPDATE','DATE ', 
        REC.LAST_UPDATED.UPDATE_DATE, 'TIME ',
        REC.LAST_UPDATED.UPDATE_TIME)   
        (A,SKIP, COLUMN(3), A, COLUMN(14),A,
          SKIP,COLUMN(3),A,COLUMN(14),A);
    PUT SKIP FILE(SYSPRINT) LIST('NOTES');
    DO I = 1 TO 10; 
      IF (REC.NOTES(I) ^= '') THEN BEGIN;
        PUT SKIP FILE(SYSPRINT) EDIT (I, ':', REC.NOTES(I))
        (COLUMN(3),F(2), A, COLUMN(14), A);
      END;


   END DISPLAYREC;

   AMOGUS: PROCEDURE(DIFF);
    /* STORE 'CHANGE' AND WRITE TO SYSPRINT */
    DCL 1 DIFF  UNALIGNED,
         2 TYPE CHAR(1),
         2 FUTURE CHAR(19),
         2 OLDREC UNALIGNED,
          %INCLUDE TAXREC;,
         2 NEWREC UNALIGNED,
          %INCLUDE TAXREC;;
      IF (DIFF.TYPE = 'A') THEN BEGIN;
        PUT SKIP FILE(SYSPRINT) LIST('RECORD ADDED');
        PUT SKIP FILE(SYSPRINT) LIST('NEW');
        CALL DISPLAYREC(DIFF.NEWREC);
      END; IF (DIFF.TYPE = 'D') THEN BEGIN;
        PUT SKIP FILE(SYSPRINT) LIST('RECORD DELETED');
        PUT SKIP FILE(SYSPRINT) LIST('OLD');
        CALL DISPLAYREC(DIFF.OLDREC);
      END;
      IF (DIFF.TYPE = 'U') THEN BEGIN;
        PUT SKIP FILE(SYSPRINT) LIST('RECORD UPDATED');
        PUT SKIP FILE(SYSPRINT) LIST('OLD');
        CALL DISPLAYREC(DIFF.OLDREC);

        PUT SKIP FILE(SYSPRINT) LIST('NEW');
        CALL DISPLAYREC(DIFF.NEWREC);
      END;
      PUT SKIP FILE(SYSPRINT) EDIT (' ') (SKIP,A,SKIP);
      /*WRITE FILE (CHANGES) FROM (DIFF);  /*todo*/

   END AMOGUS;

   /*********************************************************************************************
   ************************************START OF MAIN PROGRAM************************************
   *********************************************************************************************/

  /* Program output */
  DCL SYSPRINT FILE OUTPUT STREAM;
  /* FILES */
  DCL OLDDAT FILE INPUT RECORD;
  DCL NEWDAT FILE INPUT RECORD;
  DCL CHANGES FILE OUTPUT RECORD;
  /* Records */
  DCL 1 READREC UNALIGNED,
        %INCLUDE TAXREC;;
  DCL 1 TEMP UNALIGNED,
        %INCLUDE TAXREC;;
  DCL 1 EMPTYREC UNALIGNED,
        %INCLUDE TAXREC;;
  DCL 1 CHANGE  UNALIGNED,
       2 TYPE CHAR(1),
       2 FUTURE CHAR(19),
       2 OLDREC UNALIGNED,
        %INCLUDE TAXREC;,
       2 NEWREC UNALIGNED,
        %INCLUDE TAXREC;;
  /* EOF Flags */
  DCL OLD_REC_END FIXED BIN(31) INIT(0);
  DCL NEW_REC_END FIXED BIN(31) INIT(0);
  DCL OLD_REC_CONSUMED FIXED BIN(31) INIT(0);
  DCL NEW_REC_CONSUMED FIXED BIN(31) INIT(0);
  DCL UPDATED FIXED BIN(31) INIT(0);
  DCL ITERATION FIXED BIN(31) INIT(0);

  ON ENDFILE(OLDDAT) BEGIN;
    OLD_REC_END = 1;
  END;
  ON ENDFILE(NEWDAT) BEGIN;
    NEW_REC_END = 1;
  END;
  EMPTYREC.TAXID = '';
  EMPTYREC.STATUS = '';
  EMPTYREC.BALANCE = '';
  EMPTYREC.LAST_UPDATED.UPDATE_DATE = '';
  EMPTYREC.LAST_UPDATED.UPDATE_TIME = '';


  DO WHILE (OLD_REC_END = 0 & NEW_REC_END = 0);
    ITERATION = ITERATION + 1;
    IF (10 = ITERATION) THEN
    BEGIN;
      RETURN;
    END;
    PUT SKIP FILE(SYSPRINT) LIST('AMOGUS');
    /* Only read if nothing was left over from last iteration */
    IF OLD_REC_CONSUMED = 0 THEN BEGIN;
      READ FILE(OLDDAT) INTO(READREC);
      OLDREC = READREC;
      OLD_REC_CONSUMED = 1;
    END;
    /* Only read if nothing was left over from last iteration */
    IF NEW_REC_CONSUMED = 0 THEN BEGIN;
      READ FILE(NEWDAT) INTO(READREC);
      NEWREC = READREC;
      NEW_REC_CONSUMED = 1;
    END;
    /*
    PUT SKIP LIST('NEW');
    CALL DISPLAYREC(NEWREC);
    PUT SKIP LIST('OLD');
    CALL DISPLAYREC(OLDREC);
    */


    /* If newrec taxid is larger, stuff was deleted*/
    IF OLDREC.META.TAXID < NEWREC.META.TAXID THEN 
    BEGIN;
        CHANGE.TYPE = 'D';
        TEMP = NEWREC;
        NEWREC = EMPTYREC;
        DO WHILE ((OLD_REC_END = 0) & 
        (OLDREC.META.TAXID < TEMP.META.TAXID));
          CALL AMOGUS(CHANGE);
          READ FILE(OLDDAT) INTO(READREC);
          OLDREC = READREC;
        END;
        NEWREC = TEMP;
    END;
    /* If oldrec taxid is larger, stuff was added*/
    ELSE IF NEWREC.META.TAXID < OLDREC.META.TAXID THEN 
    BEGIN;
        CHANGE.TYPE = 'A';
        TEMP = OLDREC;
        OLDREC = EMPTYREC;
        DO WHILE ((NEW_REC_END = 0) & 
        (NEWREC.META.TAXID < TEMP.META.TAXID));
          CALL AMOGUS(CHANGE);
          READ FILE(NEWDAT) INTO(READREC);
          NEWREC = READREC;
        END;
        OLDREC = TEMP;
    END;
    ELSE BEGIN;
      CHANGE.TYPE = 'U';
      IF ^(OLDREC.META.STATUS = NEWREC.META.STATUS & 
         OLDREC.META.LAST_UPDATED.UPDATE_DATE =
         NEWREC.META.LAST_UPDATED.UPDATE_DATE &
         OLDREC.META.LAST_UPDATED.UPDATE_TIME =
         NEWREC.META.LAST_UPDATED.UPDATE_TIME &
         OLDREC.BALANCE = NEWREC.BALANCE
         ) THEN 
      BEGIN;
          CALL AMOGUS(CHANGE);
      END;
      NEW_REC_CONSUMED = 0;
      OLD_REC_CONSUMED = 0;
    END;
  END;
  /* Inlined flush function again because pl1 gave me trust issues */
  /* stuff in newrec or oldrec needs to be flushed 
    because other file is empty */
  IF (NEW_REC_END = 0) THEN 
  BEGIN;
    CHANGE.TYPE = 'A';
    CHANGE.OLDREC = EMPTYREC;
    DO WHILE (0 = NEW_REC_END);
      CALL AMOGUS(CHANGE);
      
      READ FILE(NEWDAT) INTO(READREC);
      NEWREC = READREC;
    END;
  END;

  IF (OLD_REC_END = 0) THEN 
  BEGIN;
    CHANGE.TYPE = 'D';
    CHANGE.NEWREC = EMPTYREC;
    DO WHILE (0 = OLD_REC_END);
      CALL AMOGUS(CHANGE);
      
      READ FILE(OLDDAT) INTO(READREC);
      OLDREC = READREC;
    END;
  END;
  CLOSE FILE(CHANGES);
  CLOSE FILE(OLDDAT);
  CLOSE FILE(NEWDAT);
 END DIFF;
